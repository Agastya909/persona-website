name: Deploy portfolio-app

on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: "Commit hash to deploy"
        required: true
      deployment_name:
        description: "Deployment name (used as workflow & container name)"
        required: true

jobs:
  deploy:
    name: Deploy ${{ inputs.deployment_name }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the specified commit
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_hash }}

      - name: Build Docker Image
        run: |
          docker build -t portfolio-app .

      - name: Save Docker Image as tar file
        run: |
          docker save portfolio-app -o portfolio-app.tar

      - name: Transfer Docker Image to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no portfolio-app.tar $SSH_USER@$SSH_HOST:/home/ubuntu/
          rm -f private_key

      - name: Deploy and Run Docker Container on EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          DEPLOYMENT_NAME: ${{ inputs.deployment_name }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key

          ssh -i private_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo apt update -y
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Add user to Docker group to avoid permission issues
            sudo usermod -aG docker \$USER
            newgrp docker

            # Ensure the Docker daemon is accessible
            sudo chmod 666 /var/run/docker.sock

            # Load Docker image
            sudo docker load -i /home/ubuntu/portfolio-app.tar

            # Stop and remove any existing container with the same name
            sudo docker stop $DEPLOYMENT_NAME || true
            sudo docker rm $DEPLOYMENT_NAME || true

            # Run new container with the specified deployment name
            sudo docker run -d --name $DEPLOYMENT_NAME -p 3000:3000 portfolio-app
          EOF

          rm -f private_key
